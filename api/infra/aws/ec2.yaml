AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to create a VPC, an EC2 instance, and run a Docker container from ECR

Parameters:
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
  KeyName:
    Description: Key pair for SSH access to instance
    Type: AWS::EC2::KeyPair::KeyName
    Default: unnamed-dev

Resources:
  MyVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true

  MySubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '10.0.1.0/24'
      MapPublicIpOnLaunch: true

  MyInternetGateway:
    Type: 'AWS::EC2::InternetGateway'

  MyGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref MyInternetGateway

  MyRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref MyVPC

  MyRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: MyGatewayAttachment
    Properties:
      RouteTableId: !Ref MyRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref MyInternetGateway

  MySubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref MySubnet
      RouteTableId: !Ref MyRouteTable

  MyInstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH and HTTP access
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0

  MyInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      ImageId: ami-0c02fb55956c7d316 # Amazon Linux 2 AMI (HVM), SSD Volume Type
      SubnetId: !Ref MySubnet
      SecurityGroupIds:
        - !Ref MyInstanceSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y docker
          service docker start
          usermod -a -G docker ec2-user
          
          # Set up the Docker login to ECR
          $(aws ecr get-login --no-include-email --region ${AWS::Region})

          # Pull and run the container from ECR
          docker pull 120386585975.dkr.ecr.${AWS::Region}.amazonaws.com/public.ecr.aws/s1l0a1p6/unnamed:latest
          docker run -d -p 80:80 120386585975.dkr.ecr.${AWS::Region}.amazonaws.com/public.ecr.aws/s1l0a1p6/unnamed:latest

Outputs:
  InstanceId:
    Description: The Instance ID
    Value: !Ref MyInstance
  PublicIP:
    Description: The Public IP of the instance
    Value: !GetAtt MyInstance.PublicIp
  VPCId:
    Description: The VPC ID
    Value: !Ref MyVPC
  SubnetId:
    Description: The Subnet ID
    Value: !Ref MySubnet
